<?xml version="1.0"?>
<content collectionGUID="44FD8F8C-925C-43F3-9CD5-016D1324738E">
  <lastEdited clientType="local-build-20111227" date="2011-12-27 22:15:15 +0000"/>
  <textBox id="generic-header-attribute" dynamic="no" visible="yes">
    <richText>&lt;b&gt;CS510&#xD;&lt;/b&gt;</richText>
  </textBox>
  <textBox id="generic-body-attributes" dynamic="no" visible="yes">
    <richText>Every couple of weeks I will summarize the milestones that have been reached and welcome comments and suggestions.&#xD;&#xD;In the  first two weeks of the class we looked at the extreme programming, software testing and UML. The handout together with the course notes should be sufficient to understand the XP philosophy and practices. The projects should exercise some of the practices (especially the team project in the second half of the course.) Software testing methodologies will be tested in the assignments.&#xD;We will not return to UML in this class. The goal of the UML overview was to make you aware of the expressive power of UML and the different modeling tools that it provides.&#xD;&#xD;In the next few lectures we will look at Object-oriented design and programming techniques with design patterns, refactoring and  aspect oriented programming. &#xD;&#xD;Once we have finished with these topics, we will go on with the second half of the class which focuses on automated program verification, validation and testing. In the lectures we will cover the formal underpinnings of program analysis (data flow analysis, abstract interpretation) and in the project we will look at how to use these techniques for verification.&#xD;&#xD;There are some other things we could cover if there is interest: model checking, theorem proving, certified compilation.&#xD;&#xD;Assignments/Project: The role of programming assignments is to learn about program analysis/verification and, at the same time, apply the principles presented in the first part of the class (XP, Junit, refactoring, design patterns). The choice of the Ovm framework was motivated by the fact that it is large enough to present many software engineering challenges that come with a large code base, it was designed in an object-oriented style and uses many design patterns, the TA is quite familiar with it and can provide assistance.&#xD;&#xD;I welcome comments and questions -- either by email or anonymously.</richText>
  </textBox>
  <textBox id="generic-title-attributes" dynamic="no" visible="yes">
    <richText>&lt;b&gt;Course Status and Objectives&lt;/b&gt;</richText>
  </textBox>
  <textBox id="generic-datefield-attributes" dynamic="no" visible="yes">
    <richText>&lt;b&gt;&lt;i&gt;Tuesday, September 5, 2006&lt;/i&gt;&lt;/b&gt;</richText>
  </textBox>
</content>
